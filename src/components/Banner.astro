---
import BannerSlide from "./Banner.Slide.astro";

const uniqueId =
  Astro.props.uniqueId ||
  `banner-${Math.random().toString(36).substring(2, 9)}`;
let slidesToShow = Astro.props.slidesToShow || 1;
let slides = Astro.props.slides || [];
---

<div id={uniqueId} class="overflow-hidden relative w-full">
  <div
    class="slider flex transition-transform duration-300 ease-in-out gap-2 h-full"
    id={`${uniqueId}-slider`}
  >
    {
      slides.map((slide: { title: string; img: string }) => (
        <BannerSlide slide={slide} />
      ))
    }
  </div>
</div>

<script is:inline define:vars={{ slidesToShow, uniqueId }}>
  document.addEventListener("DOMContentLoaded", () => {
    const sliderId = `${uniqueId}-slider`;
    const slider = document.getElementById(sliderId);
    const slides = slider.querySelectorAll(".slide");

    let currentSlide = 0;
    let isDragging = false;
    let startX = 0;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let animationID;

    const updateSlidesToShow = () => {
      const windowWidth = window.innerWidth;
      if (windowWidth <= 768) {
        slidesToShow = 1;
      } else if (windowWidth <= 1024) {
        slidesToShow = 2; // Adjust for medium screens
      }

      // Update flex-basis dynamically
      slides.forEach((slide) => {
        slide.style.flex = `0 0 ${100 / slidesToShow}%`;
      });

      // Reset position to the current slide index
      setPositionByIndex();
    };

    const setPositionByIndex = () => {
      const slideWidth = slider.offsetWidth / slidesToShow;
      currentTranslate = -currentSlide * slideWidth;
      prevTranslate = currentTranslate;
      slider.style.transition = "transform 0.3s ease-out";
      slider.style.transform = `translateX(${currentTranslate}px)`;
    };

    // Dragging functions
    const getPositionX = (event) =>
      event.type.includes("mouse") ? event.pageX : event.touches[0].clientX;

    const animation = () => {
      slider.style.transform = `translateX(${currentTranslate}px)`;
      if (isDragging) requestAnimationFrame(animation);
    };

    const dragStart = (event) => {
      isDragging = true;
      startX = getPositionX(event);
      slider.style.transition = "none";
      animationID = requestAnimationFrame(animation);
    };

    const dragMove = (event) => {
      if (!isDragging) return;
      const currentPosition = getPositionX(event);
      currentTranslate = prevTranslate + currentPosition - startX;
    };

    const dragEnd = () => {
      cancelAnimationFrame(animationID);
      isDragging = false;

      const totalSlides = slides.length;
      const slideWidth = slider.offsetWidth / slidesToShow;
      currentSlide = Math.round(-currentTranslate / slideWidth);

      if (currentSlide < 0) currentSlide = 0;
      if (currentSlide > totalSlides - slidesToShow) {
        currentSlide = totalSlides - slidesToShow;
      }

      setPositionByIndex();
    };

    // Add event listeners
    slider.addEventListener("mousedown", dragStart);
    slider.addEventListener("mousemove", dragMove);
    slider.addEventListener("mouseup", dragEnd);
    slider.addEventListener("mouseleave", dragEnd);
    slider.addEventListener("touchstart", dragStart);
    slider.addEventListener("touchmove", dragMove);
    slider.addEventListener("touchend", dragEnd);

    // Handle window resize
    window.addEventListener("resize", updateSlidesToShow);

    // Initialize
    updateSlidesToShow();
  });
</script>
